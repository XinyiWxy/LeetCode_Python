
Solution 1: Two Pointers
We use two pointers 
 and 
 pointing to the end of two arrays, and a pointer 
 pointing to the end of the merged array.

Every time we compare the two elements at the end of the two arrays, and move the larger one to the end of the merged array. Then we move the pointer one step forward, and repeat this process until the two pointers reach the start of the arrays.

The time complexity is 
, where 
 and 
 are the lengths of two arrays. The space complexity is 
.


#1
class Solution:
    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
        k = m + n - 1
        i, j = m - 1, n - 1
        while j >= 0:
            if i >= 0 and nums1[i] > nums2[j]:
                nums1[k] = nums1[i]
                i -= 1
            else:
                nums1[k] = nums2[j]
                j -= 1
                k -= 1




# 2
class Solution:
    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
        """
        Do not return anything, modify nums1 in-place instead.
        """
        
        if m == 0:
            nums1[0:] = nums2[0:]
            return(nums1)

        if n == 0:
            nums1[0:] = nums1[0:]
            return(nums1)
        

        for i in range(m+n-1, 0, -1):
            case1,case2 = nums1[m-1], nums2[n-1]

            if case1 <= case2:
                nums1[i] = case2
                n -= 1

            else: 
                nums1[i] = case1
                m -= 1

            if not m: #m==0
                nums1[0:n] = nums2[0:n]
                break

            if not n: #n==0
                break
        return (nums1)

        

